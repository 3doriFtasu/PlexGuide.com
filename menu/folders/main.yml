#!/bin/bash
#
# Title:      PlexGuide (Reference Title File)
# Author(s):  Admin9705 - Deiteq
# URL:        https://plexguide.com - http://github.plexguide.com
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:

    - name: Register Domain
      shell: "cat /var/plexguide/server.domain"
      register: domain
      ignore_errors: True

    - name: Register IP
      shell: "cat /var/plexguide/server.ip"
      register: ipaddress
      ignore_errors: True

    - name: Register Ports
      shell: "cat /var/plexguide/server.ports"
      register: ports
      ignore_errors: True

    - name: Register HD Path
      shell: "cat /var/plexguide/server.hd.path"
      register: path
      ignore_errors: True

    - name: Register Auth Path
      shell: "cat /var/plexguide/server.ht"
      register: auth
      ignore_errors: True

    - name: Logging Ansible Role Information
      shell: "echo 'INFO - Ansible Role Folders Started' > /var/plexguide/pg.log && bash /opt/plexguide/menu/log/log.sh"

   ########### PlexDrive
    - name: PlexDrive Check
      stat:
        path: /mnt/plexdrive
      register: plexdrive

    - name: Create PlexDrive Folder
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/plexdrive
      when: plexdrive.stat.exists == False
      ignore_errors: yes

  ############ GCrypt
    - name: GCrypt Check
      stat:
        path: /mnt/gcrypt
      register: gcrypt

    - name: Create GCrypt Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/gcrypt/tv
        - /mnt/gcrypt/movies
        - /mnt/gcrypt/music
        - /mnt/gcrypt/ebooks
        - /mnt/gcrypt/abooks
        - /mnt/gcrypt/xxx
      when: gcrypt.stat.exists == False
      ignore_errors: yes
  ############ TCrypt
    - name: TCrypt Check
      stat:
        path: /mnt/tcrypt
      register: tcrypt

    - name: Create TCrypt Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/tcrypt/tv
        - /mnt/tcrypt/movies
        - /mnt/tcrypt/music
        - /mnt/tcrypt/ebooks
        - /mnt/tcrypt/abooks
        - /mnt/tcrypt/xxx
      when: tcrypt.stat.exists == False
      ignore_errors: yes

  ############ Personal Containers Folder
    - name: UnionFS Check
      stat:
        path: /opt/mycontainers
      register: mycontainers

    - name: Create UnionFS Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /opt/mycontainers
      when: mycontainers.stat.exists == False
      ignore_errors: yes

  ############ UnionFS
    - name: UnionFS Check
      stat:
        path: /mnt/unionfs
      register: unionfs

    - name: Create UnionFS Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/unionfs
      when: unionfs.stat.exists == False
      ignore_errors: yes

  ############ TMP
    - name: TMP Check
      stat:
        path: /mnt/tmp
      register: tmp

    - name: Create GDrive Folders
      file: "path={{item}} state=directory"
      with_items:
        - /mnt/tmp
      when: tmp.stat.exists == False
      ignore_errors: yes

  ############ GDrive
    - name: GDrive Check
      stat:
        path: /mnt/gdrive
      register: gdrive

    - name: Create GDrive Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/gdrive
        - /mnt/gdrive/tv
        - /mnt/gdrive/movies
        - /mnt/gdrive/music
        - /mnt/gdrive/ebooks
        - /mnt/gdrive/abooks
        - /mnt/gdrive/xxx
      when: gdrive.stat.exists == False
      ignore_errors: yes
  ############ TCrypt
    - name: Create GDrive Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/tcrypt
        - /mnt/tcrypt/tv
        - /mnt/tcrypt/movies
        - /mnt/tcrypt/music
        - /mnt/tcrypt/ebooks
        - /mnt/tcrypt/abooks
        - /mnt/tcrypt/xxx
      when: gdrive.stat.exists == False
      ignore_errors: yes

  ############ TDrive
    - name: TDrive Check
      stat:
        path: /mnt/tdrive
      register: tdrive

    - name: Create TDrive Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/tdrive
        - /mnt/tdrive/tv
        - /mnt/tdrive/movies
        - /mnt/tdrive/music
        - /mnt/tdrive/ebooks
        - /mnt/tdrive/abooks
        - /mnt/tdrive/xxx
      when: tdrive.stat.exists == False
      ignore_errors: yes

  ############ Encrypt
    - name: Encrypt Check
      stat:
        path: /mnt/encrypt
      register: encrypt

    - name: Create Encrypt Folders
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
      with_items:
        - /mnt/encrypt/tv
        - /mnt/encrypt/movies
        - /mnt/encrypt/music
        - /mnt/encrypt/ebooks
        - /mnt/encrypt/abooks
        - /mnt/encrypt/xxx
      when: encrypt.stat.exists == False
      ignore_errors: yes

    - name: Create NZB Directories
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000 recurse=true"
      with_items:
        - "{{path.stdout}}/incomplete/nzbget"
        - "{{path.stdout}}/downloads/nzbget/movies"
        - "{{path.stdout}}/downloads/nzbget/music"
        - "{{path.stdout}}/downloads/nzbget/tv"
        - "{{path.stdout}}/downloads/nzbget/xxx"
        - "{{path.stdout}}/downloads/nzbget/ebooks"
        - "{{path.stdout}}/downloads/nzbget/nzb"
        - "{{path.stdout}}/downloads/nzbget/queue"
        - "{{path.stdout}}/downloads/nzbget/tmp"
        - "{{path.stdout}}/downloads/nzbget/log"

    - name: Create Basic Directories
      file: "path={{item}} state=directory mode=0775 owner=1000 group=1000 recurse=true"
      with_items:
        - "/opt/appdata/plexguide"
        - "/var/plexguide"
        - "/mnt/move"
        - "/var/plexguide/logs"
        - "{{path.stdout}}/pgops"
        - /opt/appdata/pgblitz/keys/unprocessed
        - /opt/appdata/pgblitz/keys/processed
        - /opt/appdata/pgblitz/keys/badjson
        - "{{path.stdout}}/pgblitz"
        - "{{path.stdout}}/torrent"
        - "{{path.stdout}}/torrent/watch"
        - "{{path.stdout}}/downloads/qbittorrent"
        - "{{path.stdout}}/downloads/qbittorrent/ebooks"
        - "{{path.stdout}}/downloads/qbittorrent/tv"
        - "{{path.stdout}}/downloads/qbittorrent/movies"
        - "{{path.stdout}}/downloads/qbittorrent/music"
        - "{{path.stdout}}/downloads/qbittorrent/xxx"
        - "{{path.stdout}}/incomplete/qbittorrent"
        - "{{path.stdout}}/downloads/deluge"
        - "{{path.stdout}}/downloads/deluge/ebooks"
        - "{{path.stdout}}/downloads/deluge/tv"
        - "{{path.stdout}}/downloads/deluge/movies"
        - "{{path.stdout}}/downloads/deluge/music"
        - "{{path.stdout}}/downloads/deluge/xxx"
        - "{{path.stdout}}/downloads/ebooks"
        - "{{path.stdout}}/incomplete/deluge"
        - "{{path.stdout}}/downloads/rutorrent"
        - "{{path.stdout}}/downloads/rutorrent"
        - "{{path.stdout}}/downloads/rutorrent/ebooks"
        - "{{path.stdout}}/downloads/rutorrent/tv"
        - "{{path.stdout}}/downloads/rutorrent/movies"
        - "{{path.stdout}}/downloads/rutorrent/music"
        - "{{path.stdout}}/downloads/rutorrent/xxx"
        - "{{path.stdout}}/incomplete/rutorrent"
        - "{{path.stdout}}/move"
        - "{{path.stdout}}/move/tv"
        - "{{path.stdout}}/move/movies"
        - "{{path.stdout}}/move/music"
        - "{{path.stdout}}/move/ebooks"
        - "{{path.stdout}}/move/abooks"
        - "{{path.stdout}}/move/xxx"
        - "{{path.stdout}}/sab"
        - "{{path.stdout}}/downloads/sabnzbd"
        - "{{path.stdout}}/incomplete/sabnzbd"
        - "{{path.stdout}}/downloads/sabnzbd/tv"
        - "{{path.stdout}}/downloads/sabnzbd/movies"
        - "{{path.stdout}}/downloads/sabnzbd/music"
        - "{{path.stdout}}/downloads/sabnzbd/ebooks"
        - "{{path.stdout}}/downloads/sabnzbd/xxx"
      ignore_errors: yes
