#!/bin/bash
#
# Title:      PlexGuide (Reference Title File)
# YML Author: Admin9705
# URL:        https://plexguide.com - http://github.plexguide.com
# GNU:        General Public License v3.0
# Origin:     https://github.com/l3uddz/plexautoscan
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:

# FACTS ######################################################################
  - name: "Set Known Facts"
    set_fact:
      pgrole: "pgscan"
      extport: "0"

  - name: Server ID
    shell: "cat /var/plexguide/pg.serverid"
    register: serverid

  - name: Token Recall
    shell: "cat /var/plexguide/plex.token"
    register: plextoken

  - name: Recall User
    shell: "cat /var/plexguide/plex.user"
    register: user

  - name: Register IP
    shell: "cat /var/plexguide/server.ip"
    register: ipaddress

  - name: Sonarr API
    shell: "cat /var/plexguide/pgscan.sapi"
    register: sapi
    ignore_errors: True

  - name: Radarr API
    shell: "cat /var/plexguide/pgscan.rapi"
    register: rapi
    ignore_errors: True

  - name: Sonarr Profile
    shell: "cat /var/plexguide/pgscan.sprofile"
    register: sprofile
    ignore_errors: True

  - name: Radarr Profile
    shell: "cat /var/plexguide/pgscan.rprofile"
    register: rprofile
    ignore_errors: True

  - name: Trakt.tv Client
    shell: "cat /var/plexguide/pgscan.client"
    register: client
    ignore_errors: True

  - name: Trakt.tv Secret
    shell: "cat /var/plexguide/pgscan.secret"
    register: secret
    ignore_errors: True

  - name: Radarr Path
    shell: "cat /var/plexguide/pgscan.rpath"
    register: rpath
    ignore_errors: True

  - name: API Sonnar
    shell: "cat /var/plexguide/pgscan.spath"
    register: spath
    ignore_errors: True

  - name: Install pip requirements
    pip:
      requirements: /opt/plexguide/menu/pgscan/requirements.txt
      executable: pip3

  - name: CronJob Role
    include_tasks: "/opt/plexguide/containers/_core.yml"

  - name: Create Basic Directories
    file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
    with_items:
        - "/opt/appdata/pgscan/"

  - name: Transfer Files
    copy:
      src: /opt/plexguide/menu/pgscan
      dest: /opt/appdata
      owner: "1000"
      group: "1000"
      mode: a+x
      force: yes

  - name: Import default config
    template:
      src: /opt/appdata/pgscan/config/default.config
      dest: /opt/appdata/pgscan/config.json
      owner: "1000"
      group: "1000"
      mode: 0775
      force: yes

  - name: Set pgscan.py as executable
    file:
      path: /opt/appdata/pgscan/pgscan.py
      owner: 1000
      group: 1000
      mode: a+x

  - name: "Create /usr/local/bin symlink"
    file:
      src: "/opt/appdata/pgscan/pgscan.py"
      dest: "/bin/pgscan"
      state: link

  - name: Check Service's Existance
    stat:
      path: "/etc/systemd/systemd/pgscan.service"
    register: pgp

  - name: Stop service
    service:
      name: pgscan
      state: stopped
    when: pgp.stat.exists

  - name: pgscan Service
    template:
      src: /opt/appdata/pgscan/systemd/pgscan.service
      dest: /etc/systemd/system/pgscan.service
      force: yes

  - name: Daemon-Reload
    systemd: state=stopped name=pgscan daemon_reload=yes enabled=no

  - name: Section Updates
    command: "/opt/appdata/pgscan/scan.py sections"
    tags: plex_autoscan_update_sections

  - name: Mapping Configs
    command: "/opt/appdata/pgscan/scan.py update_sections"
    tags: plex_autoscan_update_sections

  - name: Start pgscan
    systemd: state=started name=pgscan enabled=yes
