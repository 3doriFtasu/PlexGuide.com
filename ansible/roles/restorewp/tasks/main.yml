#!/bin/bash
#
# [Ansible Role]
#
# GitHub:   https://github.com/Admin9705/PlexGuide.com-The-Awesome-Plex-Server
# Author:   Admin9705 & Deiteq
# URL:      https://plexguide.com
#
# PlexGuide Copyright (C) 2018 PlexGuide.com
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
---
- name: "Server ID for Backup"
  shell: "cat /var/plexguide/wp.id"
  register: server_id

- name: "For WP Container"
  shell: "echo 'wordpress-{{server_id.stdout}}'"
  register: wp_id

- debug: msg="Temp Message - For {{wp_id.stdout}}"

############## CHECKING DATA LOCATION
- name: Checking WordPress on GDrive - {{wp_id.stdout}}
  stat:
    path: /mnt/gdrive/plexguide/backup/wordpress/{{server_id.stdout}}/{{server_id.stdout}}
  register: programgdrive

- name: Checking WordPress DB on GDrive - {{wp_id.stdout}}
  stat:
    path: /mnt/gdrive/plexguide/backup/wordpress/{{server_id.stdout}}/{{server_id.stdout}}
  register: programdbgdrive

############## CHECKING DATA LOCATION
- name: "Remove Old Local Dataa - {{wp_id.stdout}}"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/{{wp_id.stdout}}.tar
    - /tmp/{{wp_id.stdout}}-db.tar
    - /opt/appdata/wordpress/{{server_id.stdout}}-db/*
    - /opt/appdata/wordpress/{{server_id.stdout}}/*
  ignore_errors: True
  when: programgdrive.stat.exists == True

- name: Checking for APPDATA {{program_var.stdout}}
  stat:
    path: /opt/appdata/wordpress/{{server_id.stdout}}-db/*
  register: programappdata
 
- debug: msg="Time Length can be Long or Short! Please Wait!"

############ FOR DATABASE
- name: "Downloading from Google Drive - {{program_var.stdout}}"
  synchronize:
    src: /mnt/gdrive/plexguide/backup/{{recovery.stdout}}/{{program_var.stdout}}.tar
    dest: /tmp
  when: programgdrive.stat.exists == True

- name: Stopping Docker Container - {{program_var.stdout}}
  docker_container:
    name: "{{program_var.stdout}}"
    state: stopped
  ignore_errors: True
  when: programgdrive.stat.exists == True

- name: Remove Old {{program_var.stdout}} from APPDATA
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /opt/appdata/{{program_var.stdout}}

- name: Create Restore Folder
  file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
  with_items:
    - /opt/appdata/{{program_var.stdout}}
  ignore_errors: yes

- name: Unzip Folders
  unarchive:
    src: /tmp/{{program_var.stdout}}.tar
    dest: /opt/appdata/{{program_var.stdout}}
    keep_newer: no
    owner: 1000
    group: 1000
    mode: 0775
  when: programgdrive.stat.exists == True

- name: Restart Docker Container - {{program_var.stdout}}
  docker_container:
    name: "{{program_var.stdout}}"
    state: started
  ignore_errors: True
  when: programgdrive.stat.exists == True

- name: Remove Leftover Tar from /tmp
  file:
    path: "{{ item }}"
    state: absent
  ignore_errors: True
  with_items:
    - /tmp/{{program_var.stdout}}.tar

#- name: Kill Switch
#  shell: echo "false" > /tmp/alive

- debug: msg="Program is now RESTORED from your Google Drive - {{program_var.stdout}}"
  when: programgdrive.stat.exists == True

- debug: msg="Program is not restored - A BACKUP Does Not Exist on GDrive {{program_var.stdout}}"
  when: programgdrive.stat.exists == False