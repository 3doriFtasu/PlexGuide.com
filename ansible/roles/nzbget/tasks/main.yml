#!/bin/bash
#
# [Ansible Role]
#
# GitHub:   https://github.com/Admin9705/PlexGuide.com-The-Awesome-Plex-Server
# Author:   Admin9705 & Deiteq
# URL:      https://plexguide.com
#
# PlexGuide Copyright (C) 2018 PlexGuide.com
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
---
- name: Remove NZBGET Container
  docker_container:
    name: nzbget
    state: absent

- name: Create nzbget download directory
  file: "path=/mnt/nzbget/ state=directory mode=0775 owner=1000 group=1000 recurse=true"

- name: Check nzbget.conf exists
  stat:
    path: "/opt/appdata/nzbget/nzbget.conf"
  register: nzbget_conf

- name: Deploy NZBGET Container
  docker_container:
    name: nzbget
    image: linuxserver/nzbget
    pull: yes
    cpu_shares: 256
    published_ports:
      - "{{ports}}6789:6789"
    volumes:
      - /opt/appdata/nzbget:/config
      - /mnt/nzbget/completed:/completed
      - /mnt/nzbget/incomplete:/incomplete
      - /mnt/nzbget/nzb:/nzb
      - /mnt/nzbget/log:/log
      - /mnt/nzbget/tmp:/tmp
      - /mnt/nzbget/queue:/queue
      - /mnt/nzbget/scripts:/scripts
      - /mnt/unionfs:/unionfs
      - /etc/localtime:/etc/localtime:ro
    env:
      PUID: 1000
      PGID: 1000
    restart_policy: always
    networks:
      - name: plexguide
        aliases:
          - nzbget
    state: started
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:nzbget.{{domain}}"
      traefik.port: "6789"

- name: Please Wait - Pending .conf generation from NZBGET
  wait_for:
    path: "/opt/appdata/nzbget/nzbget.conf"
    state: present
  when: nzbget_conf.stat.exists == False

- name: "Wait 8 Seconds"
  wait_for:
    timeout: 8
  when: nzbget_conf.stat.exists == False

- name: Customize nzbget.conf
  docker_container:
    name: nzbget
    state: stopped
  when: nzbget_conf.stat.exists == False

- name: Remove User
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^ControlUsername\s?='
    line: 'ControlUsername='
    state: present
  when: nzbget_conf.stat.exists == False

- name: PG Remove Password Test
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: ControlPassword=tegbzn6789
    replace: ControlPassword=
  when: nzbget_conf.stat.exists == False

- name: PG Change MainDir Directory
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: MainDir=
    replace: MainDir=/config
  when: nzbget_conf.stat.exists == False

- name: PG InterDir Directory
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: InterDir=
    replace: InterDir=/incomplete
  when: nzbget_conf.stat.exists == False

- name: Change DestDir director
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: DestDir=
    replace: DestDir=/completed
  when: nzbget_conf.stat.exists == False

- name: Change NZBDir Directory
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: NzbDir=
    replace: NzbDir=/nzb
  when: nzbget_conf.stat.exists == False

- name: Change NZBDir Directory
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: QueueDir=
    replace: QueueDir=/queue
  when: nzbget_conf.stat.exists == False

- name: Change TempDir
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: TempDir=
    replace: TempDir=/tmp
  when: nzbget_conf.stat.exists == False

- name: Change ScriptDir
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: ScriptDir=
    replace: ScriptDir=scripts/
  when: nzbget_conf.stat.exists == False

- name: LogFile
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: LogFile=
    replace: LogFile=/log/nzbget.log
  when: nzbget_conf.stat.exists == False

- name: DirectUnpack Set to On
  replace:
    path: /opt/appdata/nzbget/nzbget.conf
    regexp: DirectUnpack=
    replace: DirectUnpack=yes
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set Movie Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category1.Name=movies'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Set Location of Movies
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category1.DestDir=/completed/movies'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set TV Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category2.Name\s?='
    line: 'Category2.Name=tv'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Set Location of TV
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category2.DestDir=/completed/tv'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set Music Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category3.Name\s?='
    line: 'Category3.Name=music'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Set Location of Music
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category3.DestDir=/completed/music'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Lowercase & Set EBook Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category4.Name\s?='
    line: 'Category4.Name=ebooks'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Set Location of EBooks
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: '^Category1.Name\s?='
    line: 'Category4.DestDir=/completed/ebooks'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Fix Lowercase & Set Movie Category
  lineinfile:
    path: "/opt/appdata/nzbget/nzbget.conf"
    regexp: 'Category1.Name='
    line: 'Category1.Name=movies'
    state: present
  when: nzbget_conf.stat.exists == False

- name: Restart Container
  docker_container:
    name: nzbget
    state: started
  when: nzbget_conf.stat.exists == False
