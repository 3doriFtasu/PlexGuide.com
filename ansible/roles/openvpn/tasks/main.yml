---

- name: Create Basic directories
  file: "path={{item}} state=directory mode=0755 owner=1000 group=1000"
  with_items:
    - /opt/appdata/vpn
    - /opt/appdata/vpn/rtorrent
    - /opt/appdata/vpn/rtorrent/config
    - /opt/appdata/vpn/rtorrent/config/openvpn
    - /mnt/torrentvpn
    - /mnt/torrentvpn/downloaded
    - /mnt/torrentvpn/temp
    - /mnt/torrentvpn/.torrent
    - /mnt/torrentvpn/.watched

- name: Move Certs
  template:
    src: ca.rsa.2048.crt
    dest: /opt/appdata/vpn/rtorrent/config/openvpn/ca.rsa.2048.crt
    force: yes

- name: Move Certs
  template:
    src: crl.rsa.2048.pem
    dest: /opt/appdata/vpn/rtorrent/config/openvpn/crl.rsa.2048.pem
    force: yes


#lan_net=`hostname -I | awk '{print $1}' | sed 's/\.[0-9]*$/.0\/24/'`
#- name: "Get Server IP"
#  shell: `hostname -I | awk '{print $1}' | sed 's/\.[0-9]*$/.0\/24/'`
#  register: lan_net



#- name: "Get Server IP"
#  stat:
#    path: "/opt/plexguide/scripts/torrentvpn/lan_net.sh"
#  register: lan_net

#- name: Check SCRIPT
#  stat:
#    path: "/opt/appdata/vpn/lan.toml"
#  register: script

#- name: Installing lan.Toml
#  template:
#    src: lan.toml
#    dest: /opt/appdata/vpn/lan.toml
#    force: yes
#  when: script.stat.exists == False

#- name: Replace lan with std output
#  replace:
#    path: /opt/appdata/vpn/lan.toml
#    regexp: lan_net
#    replace: "{{lan_net.stdout}}"

#- debug: msg="Your LAN_NETWORK Address is {{lan_net.stdout}}"

- name: Get VPN username
  pause:
    prompt: "What is your PIA username? "
  register: user
#  when: vpn_prefs.stat.exists == False

- debug: msg="Using following username {{user.user_input}}"
#  when: vpn_prefs.stat.exists == False

- name: Get VPN password
  pause:
    prompt: "What is your PIA password? "
  register: password
#  when: vpn_prefs.stat.exists == False

- debug: msg="Using following password {{password.user_input}}"
#  when: vpn_prefs.stat.exists == False- name: Remove Rtorrent Container

#- debug: msg="Your LAN_NETWORK Address is {{lan_net.stdout}}"
#  when: vpn_prefs.stat.exists == False

#- name: Get LAN Net address
#  template:
#    src: lan_net.sh
#    dest: /opt/appdata/vpn/vpn.env
#    force: yes
#  when: script.stat.exists == False
