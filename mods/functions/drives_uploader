#!/bin/bash
############# https://github.com/plexguide/PlexGuide.com/graphs/contributors ###
drives_uploader() {

# pulls stored info ############################################################
drives_menu_start_setup

# temporary ####################################################################
drives_uploader_start

# generates starting part of the log ###########################################
drives_uploader_log1

# keygen #######################################################################
drives_uploader_slot_keygen

# if nothing to upload #########################################################
if [[ $(cat "$path_upload"/upload.long) == "" ]]; then
echo "NOTHING TO UPLOAD"
echo "Nothing to Upload" >> "$logpath_primary"
sleep 5; drives_uploader && exit; fi

echo "" >> $logpath_primary
# exempt items from list #######################################################
drives_uploader_exempt

# before looping, ensures to reset item to fetch from merit list ###############
merit_count=0

# start looping through slot folders ###########################################
while read b; do

transport_loop="off"
mkdir -p "$path_upload"/${b}
  if [[ ! -e "/pg/var/transport/${b}/key.long" ]]; then
      echo "SLOT ${b}: Available" >> "$logpath_primary"
      let "merit_count=merit_count+1"
      touch /pg/var/transport/${b}/key.short

# generates keys base on merit list order ##################################
drives_uploader_merit_list

# selecting path based on method #####################################
drives_uploader_path_method
drives_uploader_log3

      # upload action ######################################################
      minicheck=$(cat "/pg/var/transport/${b}/key.long")
      if [[ "$minicheck" != "" ]]; then

# logging information
drives_uploader_log2

# store slot information for variable recall
echo "$b" > /pg/var/transport/$b/var.slot

# outputs size of the file for tally #################################
stat -c %s "$longkey" > /pg/var/transport/${b}/file.size

# execution of movement
drives_uploader_rclone

        # delete folder info
        var_slot=$(cat /pg/var/transport/$b/var.slot)
        #rm -rf /pg/var/transport/$var_slot/*

        # self delete folder info because file stuck or 403; recycles ########
        upload_checker=$(echo $longkey)
        echo "FLAG 2 - $upload_checker" >> "$logpath_primary"

    else
      a=a
      #echo "FLAG BAD" >> "$logpath_primary"
  fi; fi
      # prevents overloading ###################################################
      sleep 1
done <"$path_upload"/slot.list

# outputs rclone info ##########################################################
drives_uploader_slotcheck

# total tally ##################################################################
drives_uploader_tally

# repeat #######################################################################
drives_uploader && exit
}
