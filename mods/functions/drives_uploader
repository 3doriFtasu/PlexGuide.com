#!/bin/bash
############# https://github.com/plexguide/PlexGuide.com/graphs/contributors ###
drives_uploader() {

# pulls stored info ############################################################
drives_menu_start_setup

# temporary ####################################################################
drives_uploader_start

# clears folder if key files are missing ####################
#while read rt; do
#  if [[ ! -e "/pg/var/transport/$rt/rclone.log" || ! -e "/pg/var/transport/$rt/key.long" ]]; then
#    rm -rf /pg/var/transport/${rt}/*
#  fi
#done <"$path_upload"/slot.list

# generates starting part of the log ###########################################
mkdir -p /pg/log/uploader

if [[ ! -e "$logpath_ucount" ]]; then echo 0 > "$logpath_ucount"; fi
ucount_plusup=$(cat $logpath_ucount)
let "ucount_plusup++"; echo "$ucount_plusup" > $logpath_ucount
echo "" >> "$logpath_primary"
echo "--------------------------------------------" >> "$logpath_primary"
echo "Uploader Loop Count: $ucount_plusup" >> "$logpath_primary"
echo "--------------------------------------------" >> "$logpath_primary"

# creates sorted merit list ####################################################
mkdir -p $path_upload && rm -rf "$path_upload"/{upload.short,upload.long}

# old ##########################################################################
# find /pg/complete/ -type f -mmin +1 -mtime +5 -printf "\n%AT %p" | sort -k1 | cut -d " " -f 2- | tail -n +2 > "$path_upload"/upload.long
# find /pg/complete/ -type f -mmin +2 -printf "\n%AT %p" | sort -k1 | cut -d " " -f 2- | tail -n +2

find /pg/complete/ -mmin +4 -type f\
 ! \( -path "/pg/complete/nzbget/*" -o -path "/pg/complete/777/*" \)\
 -printf "\n%AT %p" | sort -k1 | cut -d " " -f 2- | tail -n +2  > "$path_upload"/upload.long

# generates short files ########################################################
while read p; do
  echo "${p#*$remove_path}" >> "$path_upload"/upload.short
done <"$path_upload"/upload.long

# if nothing to upload #########################################################
if [[ $(cat "$path_upload"/upload.long) == "" ]]; then
echo "NOTHING TO UPLOAD"
echo "Nothing to Upload" >> "$logpath_primary"
sleep 5; drives_uploader && exit; fi

echo "" >> $logpath_primary
# exempt items from list #######################################################
drives_uploader_exempt

# before looping, ensures to reset item to fetch from merit list ###############
merit_count=0

# start looping through slot folders ###########################################
while read b; do

transport_loop="off"
mkdir -p "$path_upload"/${b}
  if [[ ! -e "/pg/var/transport/${b}/key.long" ]]; then
      echo "SLOT ${b}: Available" >> "$logpath_primary"
      let "merit_count=merit_count+1"
      touch /pg/var/transport/${b}/key.short

      # generates keys base on merit list order ##################################
      sed "${merit_count}q;d" "$path_upload"/upload.long >> /pg/var/transport/${b}/key.long
      sed "${merit_count}q;d" "$path_upload"/upload.short >> /pg/var/transport/${b}/key.short

      # upload variables####################################################
      shortkey=$(cat /pg/var/transport/${b}/key.short); longkey=$(cat /pg/var/transport/${b}/key.long)
      drive_upload=$(cat /pg/var/drives/drive.upload);
      # selecting path based on method #####################################
      if [[ "$drive_mode" == "BASIC" ]]; then
        rclone_upload=$(cat /pg/var/drives/drive.rclone)
      elif [[ "$drive_mode" == "BLITZ" ]]; then
        echo "$(ls /pg/var/drives/shared/${rclone_drive}/blitz/)" > /pg/var/drives/blitz.list
        prime_number=$(wc -l /pg/var/drives/blitz.list | awk '{print $1}')
        num=$( echo $(($RANDOM % $prime_number)) )
        ((fnum=$num+1))
        lcatch=0
        while read dfg; do
          let "lcatch++"
          if [[ "$lcatch" == "$fnum" ]]; then rpath=${dfg}; fi
        done < /pg/var/drives/blitz.list
        rclone_upload="/pg/var/drives/shared/${rclone_drive}/blitz/$rpath"
        #echo $rclone_upload | head +n 1
        drive_upload=$(cat $rclone_upload | head -n 1 | cut -c2- | rev | cut -c2- | rev)
      fi
      echo "SELECT BLITZ KEY - $rpath" >> $logpath_primary
      echo "BLITZKEY - $rpath" > /pg/var/transport/$b/blitz.log
      #echo "DRIVE_UPLOAD - $drive_upload" > /pg/var/transport/$b/drive.upload

      # upload action ######################################################
      minicheck=$(cat "/pg/var/transport/${b}/key.long")
      if [[ "$minicheck" != "" ]]; then

        # logging information
echo "SLOT ${b}: Drive - $drive_upload - Upload Path $shortkey" >> "$logpath_primary"
echo "rclone moveto "$longkey" $drive_upload:"$shortkey" --config="$rclone_upload" --log-file=/pg/var/transport/${b}/rclone.log --log-level=INFO --stats-one-line --stats=5s --stats-file-name-length=0" > /pg/var/transport/$b/rclone.info

# store slot information for variable recall
echo "$b" > /pg/var/transport/$b/var.slot

# outputs size of the file for tally #################################
stat -c %s "$longkey" > /pg/var/transport/${b}/file.size

# execution of movement
rclone moveto "$longkey" $drive_upload:"${shortkey}" \
--config="$rclone_upload" \
--log-file="/pg/var/transport/${b}/rclone.log" \
--log-level=INFO --stats-one-line --stats=5s --stats-file-name-length=0 &>/dev/null &

        # delete folder info
        var_slot=$(cat /pg/var/transport/$b/var.slot)
        #rm -rf /pg/var/transport/$var_slot/*

        # self delete folder info because file stuck or 403; recycles ########
        upload_checker=$(echo $longkey)
        echo "FLAG 2 - $upload_checker" >> "$logpath_primary"

    else
      a=a
      #echo "FLAG BAD" >> "$logpath_primary"
  fi; fi
      # prevents overloading ###################################################
      sleep .5
done <"$path_upload"/slot.list

# outputs rclone info ##########################################################
drives_uploader_slotcheck

# total tally ##################################################################
drives_uploader_tally

# repeat #######################################################################
drives_uploader && exit
}
