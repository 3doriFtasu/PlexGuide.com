#!/bin/bash
############# https://github.com/plexguide/PlexGuide.com/graphs/contributors ###
apps_repos() {
a=a
}

repos_part1 () {
apps_interface_start
common_message "🚀  App Repo Modification Pull" "💬 More Info? Visit ~ plexguide.com/wiki/app-repos

[1] Primary   - $primary1 ($primary2)
[2] Community - $community1 ($community2)
[3] Personal  - $personal1 ($personal2)
[4] Pull      - $user_check
[Z] Exit"

common_number

case $typed in
    1 ) rtype="primary" && repos_part2 && apps_menu && exit ;;
    2 ) rtype="community" && repos_part2 && apps_menu && exit ;;
    3 ) rtype="personal" && repos_part2 && apps_menu && exit ;;
    4 ) repo_time && apps_menu && exit ;;
    z ) apps_menu && exit ;;
    Z ) apps_menu && exit ;;
    * ) repos_part1 && exit ;;
esac

}

repo_time () {
common_main /pg/var/defaults/user.check Daily user_check
common_message "🚀  Default App Repos" "💬 Current Update Frequency: $user_check

[1] Hourly
[2] Daily     (Default)
[3] Weekly
[4] Immediate (Not Recommended - Developer)
[5] Off       (Not Recommended - No Updates)
[Z] Exit"

common_number

case $typed in
    1 ) echo "Hourly" > /pg/var/defaults/user.check && repos_part1 && exit ;;
    2 ) echo "Daily" > /pg/var/defaults/user.check && repos_part1 && exit ;;
    3 ) echo "Weekly" > /pg/var/defaults/user.check && repos_part1 && exit ;;
    4 ) echo "Immediate" > /pg/var/defaults/user.check && repos_part1 && exit ;;
    5 ) echo "Off" > /pg/var/defaults/user.check && repos_part1 && exit ;;
    z ) repos_part1 && repos_part1 && exit ;;
    Z ) repos_part1 && repos_part1 && exit ;;
    * ) repo_time && exit ;;
esac
}

repos_part2 () {
repo1=$(cat /pg/var/repos/repo.${rtype}1)
repo2=$(cat /pg/var/repos/repo.${rtype}2)

common_message "🚀  Repo Information" "TIP: Fork the ${rtype} repo via github.com/$repo1.

Current - github.com/$repo1 Branch: $repo2
Your forked project called? 1st Part ~ Project | 2nd Part ~ Branch Name

Format Examples below:
$repo2 v1
Admin9705/myproject dev
Doob/$repo2 v2"
common_number
repos_part4
}

repos_part3 () {

abc=$typed; repo1=$typed
common_message "🚀  App Repo - ${rtype}" "💬  Repo Change Correct? >>> $abc

[Y/N] or [Z] Exit"

common_number
case $typed in
    y ) a=a ;;
    Y ) a=a ;;
    n ) repos_part2 && exit ;;
    N ) repos_part2 && exit ;;
    z ) apps_menu && exit ;;
    Z ) apps_menu && exit ;;
    * ) repos_part3 && exit ;;
esac

common_header "💬 $abc is set in lieu of the plexguide/${rtype} repo!"
common_confirm

repos_check
}

repos_check () {

part1=$(echo $abc | awk '{print $1}')
part2=$(echo $abc | awk '{print $1}')

exist_check=$(curl -s https://github.com/${part1}/tree/${part2} | grep "Page not found")
if [[ "$exist_check" == "" ]]; then
common_message "💬 VALID!" "URL: https://github.com/${part1}/tree/${part2}

This REPO/BRANCH is valid!"

echo "$part1" > /pg/var/repos/repo.${rtype}1
echo "$part2" > /pg/var/repos/repo.${rtype}2

rm -rf /pg/var/${rtype}
rm -rf /pg/mods/containers/${rtype}
git clone -b ${part2} --single-branch https://github.com/${part1}.git /pg/var/${rtype}
common_fcreate_silent /pg/var/${rtype}
common_fcreate_silent /pg/mods/containers/${rtype}
bash /pg/mods/functions/.create.sh 1>/dev/null 2>&1
bash /pg/mods/functions/.${rtype}_apps.sh 1>/dev/null 2>&1
cp -f /pg/var/personal/* /pg/mods/containers/${rtype}/ 1>/dev/null 2>&1
common_header "💬 Downloaded - https://github.com/${part1}/tree/${part2}"
else
echo FLAG 3
common_message "⛔️ WARNING! DOES NOT EXIST" "URL: https://github.com/${part1}/tree/${part2}

This REPO/BRANCH does not exist! Please check and ensure that your values are
valid! No change have been made."
fi

common_confirm
repos_part1
}
